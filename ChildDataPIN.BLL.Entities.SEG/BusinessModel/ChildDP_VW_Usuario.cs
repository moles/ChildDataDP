//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace ChildDataPIN.BLL.Entities.SEG
{
    [DataContract(IsReference = false)]
    public partial class ChildDP_VW_Usuario:  INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IdUsuario
        {
            get { return _idUsuario; }
            set
            {
                if (_idUsuario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdUsuario' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idUsuario = value;
                    OnPropertyChanged("IdUsuario");
                }
            }
        }
        private System.Guid _idUsuario;
    
        [DataMember]
        public string primer_nombre
        {
            get { return _primer_nombre; }
            set
            {
                if (_primer_nombre != value)
                {
                    _primer_nombre = value;
                    OnPropertyChanged("primer_nombre");
                }
            }
        }
        private string _primer_nombre;
    
        [DataMember]
        public string segundo_nombre
        {
            get { return _segundo_nombre; }
            set
            {
                if (_segundo_nombre != value)
                {
                    _segundo_nombre = value;
                    OnPropertyChanged("segundo_nombre");
                }
            }
        }
        private string _segundo_nombre;
    
        [DataMember]
        public string primer_apellido
        {
            get { return _primer_apellido; }
            set
            {
                if (_primer_apellido != value)
                {
                    _primer_apellido = value;
                    OnPropertyChanged("primer_apellido");
                }
            }
        }
        private string _primer_apellido;
    
        [DataMember]
        public string segundo_apellido
        {
            get { return _segundo_apellido; }
            set
            {
                if (_segundo_apellido != value)
                {
                    _segundo_apellido = value;
                    OnPropertyChanged("segundo_apellido");
                }
            }
        }
        private string _segundo_apellido;
    
        [DataMember]
        public string alias
        {
            get { return _alias; }
            set
            {
                if (_alias != value)
                {
                    _alias = value;
                    OnPropertyChanged("alias");
                }
            }
        }
        private string _alias;
    
        [DataMember]
        public bool activo
        {
            get { return _activo; }
            set
            {
                if (_activo != value)
                {
                    _activo = value;
                    OnPropertyChanged("activo");
                }
            }
        }
        private bool _activo;
    
        [DataMember]
        public System.Guid regpor
        {
            get { return _regpor; }
            set
            {
                if (_regpor != value)
                {
                    _regpor = value;
                    OnPropertyChanged("regpor");
                }
            }
        }
        private System.Guid _regpor;
    
        [DataMember]
        public string regen
        {
            get { return _regen; }
            set
            {
                if (_regen != value)
                {
                    _regen = value;
                    OnPropertyChanged("regen");
                }
            }
        }
        private string _regen;
    
        [DataMember]
        public System.DateTime regel
        {
            get { return _regel; }
            set
            {
                if (_regel != value)
                {
                    _regel = value;
                    OnPropertyChanged("regel");
                }
            }
        }
        private System.DateTime _regel;
    
        [DataMember]
        public System.DateTime actel
        {
            get { return _actel; }
            set
            {
                if (_actel != value)
                {
                    _actel = value;
                    OnPropertyChanged("actel");
                }
            }
        }
        private System.DateTime _actel;
    
        [DataMember]
        public System.Guid actpor
        {
            get { return _actpor; }
            set
            {
                if (_actpor != value)
                {
                    _actpor = value;
                    OnPropertyChanged("actpor");
                }
            }
        }
        private System.Guid _actpor;
    
        [DataMember]
        public string acten
        {
            get { return _acten; }
            set
            {
                if (_acten != value)
                {
                    _acten = value;
                    OnPropertyChanged("acten");
                }
            }
        }
        private string _acten;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = false;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
