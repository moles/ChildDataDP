//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace ChildDataPIN.BLL.Entities.COM
{
    [DataContract(IsReference = false)]
    public partial class Deuda:  INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private System.Guid _id;
    
        [DataMember]
        public Nullable<int> SCNumber
        {
            get { return _sCNumber; }
            set
            {
                if (_sCNumber != value)
                {
                    _sCNumber = value;
                    OnPropertyChanged("SCNumber");
                }
            }
        }
        private Nullable<int> _sCNumber;
    
        [DataMember]
        public string SCName
        {
            get { return _sCName; }
            set
            {
                if (_sCName != value)
                {
                    _sCName = value;
                    OnPropertyChanged("SCName");
                }
            }
        }
        private string _sCName;
    
        [DataMember]
        public string NODescription
        {
            get { return _nODescription; }
            set
            {
                if (_nODescription != value)
                {
                    _nODescription = value;
                    OnPropertyChanged("NODescription");
                }
            }
        }
        private string _nODescription;
    
        [DataMember]
        public Nullable<int> SPNumber
        {
            get { return _sPNumber; }
            set
            {
                if (_sPNumber != value)
                {
                    _sPNumber = value;
                    OnPropertyChanged("SPNumber");
                }
            }
        }
        private Nullable<int> _sPNumber;
    
        [DataMember]
        public string CommunicationType
        {
            get { return _communicationType; }
            set
            {
                if (_communicationType != value)
                {
                    _communicationType = value;
                    OnPropertyChanged("CommunicationType");
                }
            }
        }
        private string _communicationType;
    
        [DataMember]
        public Nullable<System.DateTime> ResponseDue
        {
            get { return _responseDue; }
            set
            {
                if (_responseDue != value)
                {
                    _responseDue = value;
                    OnPropertyChanged("ResponseDue");
                }
            }
        }
        private Nullable<System.DateTime> _responseDue;
    
        [DataMember]
        public string Location
        {
            get { return _location; }
            set
            {
                if (_location != value)
                {
                    _location = value;
                    OnPropertyChanged("Location");
                }
            }
        }
        private string _location;
    
        [DataMember]
        public string CommunityWorkerName
        {
            get { return _communityWorkerName; }
            set
            {
                if (_communityWorkerName != value)
                {
                    _communityWorkerName = value;
                    OnPropertyChanged("CommunityWorkerName");
                }
            }
        }
        private string _communityWorkerName;
    
        [DataMember]
        public Nullable<byte> ResponseStatus
        {
            get { return _responseStatus; }
            set
            {
                if (_responseStatus != value)
                {
                    _responseStatus = value;
                    OnPropertyChanged("ResponseStatus");
                }
            }
        }
        private Nullable<byte> _responseStatus;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = false;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
