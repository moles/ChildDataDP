//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ChildDataPIN.BLL.Entities.BASE
{
    [DataContract(IsReference = false)]
    [KnownType(typeof(Entidad))]
    [KnownType(typeof(EstadoCoordinador))]
    public partial class Coordinador: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IdCoordinador
        {
            get { return _idCoordinador; }
            set
            {
                if (_idCoordinador != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdCoordinador' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idCoordinador = value;
                    OnPropertyChanged("IdCoordinador");
                }
            }
        }
        private System.Guid _idCoordinador;
    
        [DataMember]
        public System.Guid IdEntidad
        {
            get { return _idEntidad; }
            set
            {
                if (_idEntidad != value)
                {
                    ChangeTracker.RecordOriginalValue("IdEntidad", _idEntidad);
                    if (!IsDeserializing)
                    {
                        if (Entidad != null && Entidad.IdEntidad != value)
                        {
                            Entidad = null;
                        }
                    }
                    _idEntidad = value;
                    OnPropertyChanged("IdEntidad");
                }
            }
        }
        private System.Guid _idEntidad;
    
        [DataMember]
        public string Codigo
        {
            get { return _codigo; }
            set
            {
                if (_codigo != value)
                {
                    _codigo = value;
                    OnPropertyChanged("Codigo");
                }
            }
        }
        private string _codigo;
    
        [DataMember]
        public System.Guid IdEstadoCoordinador
        {
            get { return _idEstadoCoordinador; }
            set
            {
                if (_idEstadoCoordinador != value)
                {
                    ChangeTracker.RecordOriginalValue("IdEstadoCoordinador", _idEstadoCoordinador);
                    if (!IsDeserializing)
                    {
                        if (EstadoCoordinador != null && EstadoCoordinador.IdEstadoCoordinador != value)
                        {
                            EstadoCoordinador = null;
                        }
                    }
                    _idEstadoCoordinador = value;
                    OnPropertyChanged("IdEstadoCoordinador");
                }
            }
        }
        private System.Guid _idEstadoCoordinador;
    
        [DataMember]
        public string Nota
        {
            get { return _nota; }
            set
            {
                if (_nota != value)
                {
                    _nota = value;
                    OnPropertyChanged("Nota");
                }
            }
        }
        private string _nota;
    
        [DataMember]
        public System.Guid CreadoPorIdUsuario
        {
            get { return _creadoPorIdUsuario; }
            set
            {
                if (_creadoPorIdUsuario != value)
                {
                    _creadoPorIdUsuario = value;
                    OnPropertyChanged("CreadoPorIdUsuario");
                }
            }
        }
        private System.Guid _creadoPorIdUsuario;
    
        [DataMember]
        public string CreadoEn
        {
            get { return _creadoEn; }
            set
            {
                if (_creadoEn != value)
                {
                    _creadoEn = value;
                    OnPropertyChanged("CreadoEn");
                }
            }
        }
        private string _creadoEn;
    
        [DataMember]
        public System.DateTime CreadoEl
        {
            get { return _creadoEl; }
            set
            {
                if (_creadoEl != value)
                {
                    _creadoEl = value;
                    OnPropertyChanged("CreadoEl");
                }
            }
        }
        private System.DateTime _creadoEl;
    
        [DataMember]
        public System.Guid ModificadoPorIdUsuario
        {
            get { return _modificadoPorIdUsuario; }
            set
            {
                if (_modificadoPorIdUsuario != value)
                {
                    _modificadoPorIdUsuario = value;
                    OnPropertyChanged("ModificadoPorIdUsuario");
                }
            }
        }
        private System.Guid _modificadoPorIdUsuario;
    
        [DataMember]
        public string ModificadoEn
        {
            get { return _modificadoEn; }
            set
            {
                if (_modificadoEn != value)
                {
                    _modificadoEn = value;
                    OnPropertyChanged("ModificadoEn");
                }
            }
        }
        private string _modificadoEn;
    
        [DataMember]
        public System.DateTime ModificadoEl
        {
            get { return _modificadoEl; }
            set
            {
                if (_modificadoEl != value)
                {
                    _modificadoEl = value;
                    OnPropertyChanged("ModificadoEl");
                }
            }
        }
        private System.DateTime _modificadoEl;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Entidad Entidad
        {
            get { return _entidad; }
            set
            {
                if (!ReferenceEquals(_entidad, value))
                {
                    var previousValue = _entidad;
                    _entidad = value;
                    FixupEntidad(previousValue);
                    OnNavigationPropertyChanged("Entidad");
                }
            }
        }
        private Entidad _entidad;
    
        [DataMember]
        public EstadoCoordinador EstadoCoordinador
        {
            get { return _estadoCoordinador; }
            set
            {
                if (!ReferenceEquals(_estadoCoordinador, value))
                {
                    var previousValue = _estadoCoordinador;
                    _estadoCoordinador = value;
                    FixupEstadoCoordinador(previousValue);
                    OnNavigationPropertyChanged("EstadoCoordinador");
                }
            }
        }
        private EstadoCoordinador _estadoCoordinador;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Entidad = null;
            EstadoCoordinador = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupEntidad(Entidad previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Coordinador.Contains(this))
            {
                previousValue.Coordinador.Remove(this);
            }
    
            if (Entidad != null)
            {
                if (!Entidad.Coordinador.Contains(this))
                {
                    Entidad.Coordinador.Add(this);
                }
    
                IdEntidad = Entidad.IdEntidad;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Entidad")
                    && (ChangeTracker.OriginalValues["Entidad"] == Entidad))
                {
                    ChangeTracker.OriginalValues.Remove("Entidad");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Entidad", previousValue);
                }
                if (Entidad != null && !Entidad.ChangeTracker.ChangeTrackingEnabled)
                {
                    Entidad.StartTracking();
                }
            }
        }
    
        private void FixupEstadoCoordinador(EstadoCoordinador previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Coordinador.Contains(this))
            {
                previousValue.Coordinador.Remove(this);
            }
    
            if (EstadoCoordinador != null)
            {
                if (!EstadoCoordinador.Coordinador.Contains(this))
                {
                    EstadoCoordinador.Coordinador.Add(this);
                }
    
                IdEstadoCoordinador = EstadoCoordinador.IdEstadoCoordinador;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EstadoCoordinador")
                    && (ChangeTracker.OriginalValues["EstadoCoordinador"] == EstadoCoordinador))
                {
                    ChangeTracker.OriginalValues.Remove("EstadoCoordinador");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EstadoCoordinador", previousValue);
                }
                if (EstadoCoordinador != null && !EstadoCoordinador.ChangeTracker.ChangeTrackingEnabled)
                {
                    EstadoCoordinador.StartTracking();
                }
            }
        }

        #endregion
    }
}
