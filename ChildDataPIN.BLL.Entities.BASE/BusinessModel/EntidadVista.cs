//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ChildDataPIN.BLL.Entities.BASE
{
    [DataContract(IsReference = false)]
    public partial class EntidadVista: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IdEntidad
        {
            get { return _idEntidad; }
            set
            {
                if (_idEntidad != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdEntidad' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idEntidad = value;
                    OnPropertyChanged("IdEntidad");
                }
            }
        }
        private System.Guid _idEntidad;
    
        [DataMember]
        public System.Guid IdTipoEntidad
        {
            get { return _idTipoEntidad; }
            set
            {
                if (_idTipoEntidad != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdTipoEntidad' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idTipoEntidad = value;
                    OnPropertyChanged("IdTipoEntidad");
                }
            }
        }
        private System.Guid _idTipoEntidad;
    
        [DataMember]
        public string TipoEntidad
        {
            get { return _tipoEntidad; }
            set
            {
                if (_tipoEntidad != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TipoEntidad' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tipoEntidad = value;
                    OnPropertyChanged("TipoEntidad");
                }
            }
        }
        private string _tipoEntidad;
    
        [DataMember]
        public System.Guid IdEstadoEntidad
        {
            get { return _idEstadoEntidad; }
            set
            {
                if (_idEstadoEntidad != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdEstadoEntidad' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idEstadoEntidad = value;
                    OnPropertyChanged("IdEstadoEntidad");
                }
            }
        }
        private System.Guid _idEstadoEntidad;
    
        [DataMember]
        public string EstadoEntidad
        {
            get { return _estadoEntidad; }
            set
            {
                if (_estadoEntidad != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EstadoEntidad' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _estadoEntidad = value;
                    OnPropertyChanged("EstadoEntidad");
                }
            }
        }
        private string _estadoEntidad;
    
        [DataMember]
        public System.Guid IdTipoIdentificacion
        {
            get { return _idTipoIdentificacion; }
            set
            {
                if (_idTipoIdentificacion != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdTipoIdentificacion' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idTipoIdentificacion = value;
                    OnPropertyChanged("IdTipoIdentificacion");
                }
            }
        }
        private System.Guid _idTipoIdentificacion;
    
        [DataMember]
        public string TipoIdentificacion
        {
            get { return _tipoIdentificacion; }
            set
            {
                if (_tipoIdentificacion != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TipoIdentificacion' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tipoIdentificacion = value;
                    OnPropertyChanged("TipoIdentificacion");
                }
            }
        }
        private string _tipoIdentificacion;
    
        [DataMember]
        public string CodigoIdentificacion
        {
            get { return _codigoIdentificacion; }
            set
            {
                if (_codigoIdentificacion != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CodigoIdentificacion' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _codigoIdentificacion = value;
                    OnPropertyChanged("CodigoIdentificacion");
                }
            }
        }
        private string _codigoIdentificacion;
    
        [DataMember]
        public string Direccion
        {
            get { return _direccion; }
            set
            {
                if (_direccion != value)
                {
                    _direccion = value;
                    OnPropertyChanged("Direccion");
                }
            }
        }
        private string _direccion;
    
        [DataMember]
        public Nullable<int> Telefono
        {
            get { return _telefono; }
            set
            {
                if (_telefono != value)
                {
                    _telefono = value;
                    OnPropertyChanged("Telefono");
                }
            }
        }
        private Nullable<int> _telefono;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string PrimerNombre
        {
            get { return _primerNombre; }
            set
            {
                if (_primerNombre != value)
                {
                    _primerNombre = value;
                    OnPropertyChanged("PrimerNombre");
                }
            }
        }
        private string _primerNombre;
    
        [DataMember]
        public string SegundoNombre
        {
            get { return _segundoNombre; }
            set
            {
                if (_segundoNombre != value)
                {
                    _segundoNombre = value;
                    OnPropertyChanged("SegundoNombre");
                }
            }
        }
        private string _segundoNombre;
    
        [DataMember]
        public string PrimerApellido
        {
            get { return _primerApellido; }
            set
            {
                if (_primerApellido != value)
                {
                    _primerApellido = value;
                    OnPropertyChanged("PrimerApellido");
                }
            }
        }
        private string _primerApellido;
    
        [DataMember]
        public string SegundoApellido
        {
            get { return _segundoApellido; }
            set
            {
                if (_segundoApellido != value)
                {
                    _segundoApellido = value;
                    OnPropertyChanged("SegundoApellido");
                }
            }
        }
        private string _segundoApellido;
    
        [DataMember]
        public Nullable<int> Celular
        {
            get { return _celular; }
            set
            {
                if (_celular != value)
                {
                    _celular = value;
                    OnPropertyChanged("Celular");
                }
            }
        }
        private Nullable<int> _celular;
    
        [DataMember]
        public Nullable<System.Guid> IdTipoSexo
        {
            get { return _idTipoSexo; }
            set
            {
                if (_idTipoSexo != value)
                {
                    _idTipoSexo = value;
                    OnPropertyChanged("IdTipoSexo");
                }
            }
        }
        private Nullable<System.Guid> _idTipoSexo;
    
        [DataMember]
        public string TipoSexo
        {
            get { return _tipoSexo; }
            set
            {
                if (_tipoSexo != value)
                {
                    _tipoSexo = value;
                    OnPropertyChanged("TipoSexo");
                }
            }
        }
        private string _tipoSexo;
    
        [DataMember]
        public string FechaNacimiento
        {
            get { return _fechaNacimiento; }
            set
            {
                if (_fechaNacimiento != value)
                {
                    _fechaNacimiento = value;
                    OnPropertyChanged("FechaNacimiento");
                }
            }
        }
        private string _fechaNacimiento;
    
        [DataMember]
        public string Nota
        {
            get { return _nota; }
            set
            {
                if (_nota != value)
                {
                    _nota = value;
                    OnPropertyChanged("Nota");
                }
            }
        }
        private string _nota;
    
        [DataMember]
        public string Organizacion
        {
            get { return _organizacion; }
            set
            {
                if (_organizacion != value)
                {
                    _organizacion = value;
                    OnPropertyChanged("Organizacion");
                }
            }
        }
        private string _organizacion;
    
        [DataMember]
        public System.Guid CreadoPorIdUsuario
        {
            get { return _creadoPorIdUsuario; }
            set
            {
                if (_creadoPorIdUsuario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreadoPorIdUsuario' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _creadoPorIdUsuario = value;
                    OnPropertyChanged("CreadoPorIdUsuario");
                }
            }
        }
        private System.Guid _creadoPorIdUsuario;
    
        [DataMember]
        public string CreadoPorUsuario
        {
            get { return _creadoPorUsuario; }
            set
            {
                if (_creadoPorUsuario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreadoPorUsuario' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _creadoPorUsuario = value;
                    OnPropertyChanged("CreadoPorUsuario");
                }
            }
        }
        private string _creadoPorUsuario;
    
        [DataMember]
        public string CreadoEn
        {
            get { return _creadoEn; }
            set
            {
                if (_creadoEn != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreadoEn' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _creadoEn = value;
                    OnPropertyChanged("CreadoEn");
                }
            }
        }
        private string _creadoEn;
    
        [DataMember]
        public System.DateTime CreadoEl
        {
            get { return _creadoEl; }
            set
            {
                if (_creadoEl != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreadoEl' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _creadoEl = value;
                    OnPropertyChanged("CreadoEl");
                }
            }
        }
        private System.DateTime _creadoEl;
    
        [DataMember]
        public System.Guid ModificadoPorIdUsuario
        {
            get { return _modificadoPorIdUsuario; }
            set
            {
                if (_modificadoPorIdUsuario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ModificadoPorIdUsuario' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _modificadoPorIdUsuario = value;
                    OnPropertyChanged("ModificadoPorIdUsuario");
                }
            }
        }
        private System.Guid _modificadoPorIdUsuario;
    
        [DataMember]
        public string ModificadoPorUsuario
        {
            get { return _modificadoPorUsuario; }
            set
            {
                if (_modificadoPorUsuario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ModificadoPorUsuario' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _modificadoPorUsuario = value;
                    OnPropertyChanged("ModificadoPorUsuario");
                }
            }
        }
        private string _modificadoPorUsuario;
    
        [DataMember]
        public string ModificadoEn
        {
            get { return _modificadoEn; }
            set
            {
                if (_modificadoEn != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ModificadoEn' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _modificadoEn = value;
                    OnPropertyChanged("ModificadoEn");
                }
            }
        }
        private string _modificadoEn;
    
        [DataMember]
        public System.DateTime ModificadoEl
        {
            get { return _modificadoEl; }
            set
            {
                if (_modificadoEl != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ModificadoEl' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _modificadoEl = value;
                    OnPropertyChanged("ModificadoEl");
                }
            }
        }
        private System.DateTime _modificadoEl;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
