//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using ChildDataPIN.BLL.Entities.BASE;


namespace ChildDataPIN.DAL.BASE
{
    public partial class BaseEntities : ObjectContext
    {
        public const string ConnectionString = "name=BaseEntities";
        public const string ContainerName = "BaseEntities";
    
        #region Constructors
    
        public BaseEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public BaseEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public BaseEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Coordinador> Coordinador
        {
            get { return _coordinador  ?? (_coordinador = CreateObjectSet<Coordinador>("Coordinador")); }
        }
        private ObjectSet<Coordinador> _coordinador;
    
        public ObjectSet<Entidad> Entidad
        {
            get { return _entidad  ?? (_entidad = CreateObjectSet<Entidad>("Entidad")); }
        }
        private ObjectSet<Entidad> _entidad;
    
        public ObjectSet<EstadoCoordinador> EstadoCoordinador
        {
            get { return _estadoCoordinador  ?? (_estadoCoordinador = CreateObjectSet<EstadoCoordinador>("EstadoCoordinador")); }
        }
        private ObjectSet<EstadoCoordinador> _estadoCoordinador;
    
        public ObjectSet<EstadoPersona> EstadoPersona
        {
            get { return _estadoPersona  ?? (_estadoPersona = CreateObjectSet<EstadoPersona>("EstadoPersona")); }
        }
        private ObjectSet<EstadoPersona> _estadoPersona;
    
        public ObjectSet<Persona> Persona
        {
            get { return _persona  ?? (_persona = CreateObjectSet<Persona>("Persona")); }
        }
        private ObjectSet<Persona> _persona;
    
        public ObjectSet<EntidadVistaBasePersona> EntidadVistaBasePersona
        {
            get { return _entidadVistaBasePersona  ?? (_entidadVistaBasePersona = CreateObjectSet<EntidadVistaBasePersona>("EntidadVistaBasePersona")); }
        }
        private ObjectSet<EntidadVistaBasePersona> _entidadVistaBasePersona;
    
        public ObjectSet<CoordinadorVista> CoordinadorVista
        {
            get { return _coordinadorVista  ?? (_coordinadorVista = CreateObjectSet<CoordinadorVista>("CoordinadorVista")); }
        }
        private ObjectSet<CoordinadorVista> _coordinadorVista;
    
        public ObjectSet<EntidadVista> EntidadVista
        {
            get { return _entidadVista  ?? (_entidadVista = CreateObjectSet<EntidadVista>("EntidadVista")); }
        }
        private ObjectSet<EntidadVista> _entidadVista;
    
        public ObjectSet<EstadoEntidad> EstadoEntidad
        {
            get { return _estadoEntidad  ?? (_estadoEntidad = CreateObjectSet<EstadoEntidad>("EstadoEntidad")); }
        }
        private ObjectSet<EstadoEntidad> _estadoEntidad;

        #endregion
        #region Function Imports
        public virtual ObjectResult<Nullable<System.Guid>> CoordinadorInsertar(Nullable<System.Guid> idEntidad, string codigo, Nullable<System.Guid> idEstadoCoordinador, string nota, Nullable<System.Guid> creadoPorIdUsuario, string creadoEn, Nullable<System.DateTime> creadoEl, Nullable<System.Guid> modificadoPorIdUsuario, string modificadoEn, Nullable<System.DateTime> modificadoEl)
        {
    
            ObjectParameter idEntidadParameter;
    
            if (idEntidad.HasValue)
            {
                idEntidadParameter = new ObjectParameter("IdEntidad", idEntidad);
            }
            else
            {
                idEntidadParameter = new ObjectParameter("IdEntidad", typeof(System.Guid));
            }
    
            ObjectParameter codigoParameter;
    
            if (codigo != null)
            {
                codigoParameter = new ObjectParameter("Codigo", codigo);
            }
            else
            {
                codigoParameter = new ObjectParameter("Codigo", typeof(string));
            }
    
            ObjectParameter idEstadoCoordinadorParameter;
    
            if (idEstadoCoordinador.HasValue)
            {
                idEstadoCoordinadorParameter = new ObjectParameter("IdEstadoCoordinador", idEstadoCoordinador);
            }
            else
            {
                idEstadoCoordinadorParameter = new ObjectParameter("IdEstadoCoordinador", typeof(System.Guid));
            }
    
            ObjectParameter notaParameter;
    
            if (nota != null)
            {
                notaParameter = new ObjectParameter("Nota", nota);
            }
            else
            {
                notaParameter = new ObjectParameter("Nota", typeof(string));
            }
    
            ObjectParameter creadoPorIdUsuarioParameter;
    
            if (creadoPorIdUsuario.HasValue)
            {
                creadoPorIdUsuarioParameter = new ObjectParameter("CreadoPorIdUsuario", creadoPorIdUsuario);
            }
            else
            {
                creadoPorIdUsuarioParameter = new ObjectParameter("CreadoPorIdUsuario", typeof(System.Guid));
            }
    
            ObjectParameter creadoEnParameter;
    
            if (creadoEn != null)
            {
                creadoEnParameter = new ObjectParameter("CreadoEn", creadoEn);
            }
            else
            {
                creadoEnParameter = new ObjectParameter("CreadoEn", typeof(string));
            }
    
            ObjectParameter creadoElParameter;
    
            if (creadoEl.HasValue)
            {
                creadoElParameter = new ObjectParameter("CreadoEl", creadoEl);
            }
            else
            {
                creadoElParameter = new ObjectParameter("CreadoEl", typeof(System.DateTime));
            }
    
            ObjectParameter modificadoPorIdUsuarioParameter;
    
            if (modificadoPorIdUsuario.HasValue)
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", modificadoPorIdUsuario);
            }
            else
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", typeof(System.Guid));
            }
    
            ObjectParameter modificadoEnParameter;
    
            if (modificadoEn != null)
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", modificadoEn);
            }
            else
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", typeof(string));
            }
    
            ObjectParameter modificadoElParameter;
    
            if (modificadoEl.HasValue)
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", modificadoEl);
            }
            else
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("CoordinadorInsertar", idEntidadParameter, codigoParameter, idEstadoCoordinadorParameter, notaParameter, creadoPorIdUsuarioParameter, creadoEnParameter, creadoElParameter, modificadoPorIdUsuarioParameter, modificadoEnParameter, modificadoElParameter);
        }
        public virtual ObjectResult<Nullable<System.Guid>> CoordinadorActualizar(Nullable<System.Guid> idCoordinador, Nullable<System.Guid> idEntidad, string codigo, Nullable<System.Guid> idEstadoCoordinador, string nota, Nullable<System.Guid> modificadoPorIdUsuario, string modificadoEn, Nullable<System.DateTime> modificadoEl)
        {
    
            ObjectParameter idCoordinadorParameter;
    
            if (idCoordinador.HasValue)
            {
                idCoordinadorParameter = new ObjectParameter("IdCoordinador", idCoordinador);
            }
            else
            {
                idCoordinadorParameter = new ObjectParameter("IdCoordinador", typeof(System.Guid));
            }
    
            ObjectParameter idEntidadParameter;
    
            if (idEntidad.HasValue)
            {
                idEntidadParameter = new ObjectParameter("IdEntidad", idEntidad);
            }
            else
            {
                idEntidadParameter = new ObjectParameter("IdEntidad", typeof(System.Guid));
            }
    
            ObjectParameter codigoParameter;
    
            if (codigo != null)
            {
                codigoParameter = new ObjectParameter("Codigo", codigo);
            }
            else
            {
                codigoParameter = new ObjectParameter("Codigo", typeof(string));
            }
    
            ObjectParameter idEstadoCoordinadorParameter;
    
            if (idEstadoCoordinador.HasValue)
            {
                idEstadoCoordinadorParameter = new ObjectParameter("IdEstadoCoordinador", idEstadoCoordinador);
            }
            else
            {
                idEstadoCoordinadorParameter = new ObjectParameter("IdEstadoCoordinador", typeof(System.Guid));
            }
    
            ObjectParameter notaParameter;
    
            if (nota != null)
            {
                notaParameter = new ObjectParameter("Nota", nota);
            }
            else
            {
                notaParameter = new ObjectParameter("Nota", typeof(string));
            }
    
            ObjectParameter modificadoPorIdUsuarioParameter;
    
            if (modificadoPorIdUsuario.HasValue)
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", modificadoPorIdUsuario);
            }
            else
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", typeof(System.Guid));
            }
    
            ObjectParameter modificadoEnParameter;
    
            if (modificadoEn != null)
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", modificadoEn);
            }
            else
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", typeof(string));
            }
    
            ObjectParameter modificadoElParameter;
    
            if (modificadoEl.HasValue)
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", modificadoEl);
            }
            else
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("CoordinadorActualizar", idCoordinadorParameter, idEntidadParameter, codigoParameter, idEstadoCoordinadorParameter, notaParameter, modificadoPorIdUsuarioParameter, modificadoEnParameter, modificadoElParameter);
        }
        public virtual ObjectResult<Nullable<System.Guid>> CoordinadorCambioDeEstado(Nullable<System.Guid> idCoordinador, Nullable<System.Guid> idEstadoCoordinador, Nullable<System.Guid> modificadoPorIdUsuario, string modificadoEn, Nullable<System.DateTime> modificadoEl)
        {
    
            ObjectParameter idCoordinadorParameter;
    
            if (idCoordinador.HasValue)
            {
                idCoordinadorParameter = new ObjectParameter("IdCoordinador", idCoordinador);
            }
            else
            {
                idCoordinadorParameter = new ObjectParameter("IdCoordinador", typeof(System.Guid));
            }
    
            ObjectParameter idEstadoCoordinadorParameter;
    
            if (idEstadoCoordinador.HasValue)
            {
                idEstadoCoordinadorParameter = new ObjectParameter("IdEstadoCoordinador", idEstadoCoordinador);
            }
            else
            {
                idEstadoCoordinadorParameter = new ObjectParameter("IdEstadoCoordinador", typeof(System.Guid));
            }
    
            ObjectParameter modificadoPorIdUsuarioParameter;
    
            if (modificadoPorIdUsuario.HasValue)
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", modificadoPorIdUsuario);
            }
            else
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", typeof(System.Guid));
            }
    
            ObjectParameter modificadoEnParameter;
    
            if (modificadoEn != null)
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", modificadoEn);
            }
            else
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", typeof(string));
            }
    
            ObjectParameter modificadoElParameter;
    
            if (modificadoEl.HasValue)
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", modificadoEl);
            }
            else
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("CoordinadorCambioDeEstado", idCoordinadorParameter, idEstadoCoordinadorParameter, modificadoPorIdUsuarioParameter, modificadoEnParameter, modificadoElParameter);
        }
        public virtual ObjectResult<Nullable<System.Guid>> EntidadInsertar(Nullable<System.Guid> idTipoEntidad, Nullable<System.Guid> idEstadoEntidad, Nullable<System.Guid> idTipoIdentificacion, string codigoIdentificacion, string direccion, Nullable<int> telefono, string email, Nullable<System.Guid> creadoPorIdUsuario, string creadoEn, Nullable<System.DateTime> creadoEl, Nullable<System.Guid> modificadoPorIdUsuario, string modificadoEn, Nullable<System.DateTime> modificadoEl)
        {
    
            ObjectParameter idTipoEntidadParameter;
    
            if (idTipoEntidad.HasValue)
            {
                idTipoEntidadParameter = new ObjectParameter("IdTipoEntidad", idTipoEntidad);
            }
            else
            {
                idTipoEntidadParameter = new ObjectParameter("IdTipoEntidad", typeof(System.Guid));
            }
    
            ObjectParameter idEstadoEntidadParameter;
    
            if (idEstadoEntidad.HasValue)
            {
                idEstadoEntidadParameter = new ObjectParameter("IdEstadoEntidad", idEstadoEntidad);
            }
            else
            {
                idEstadoEntidadParameter = new ObjectParameter("IdEstadoEntidad", typeof(System.Guid));
            }
    
            ObjectParameter idTipoIdentificacionParameter;
    
            if (idTipoIdentificacion.HasValue)
            {
                idTipoIdentificacionParameter = new ObjectParameter("IdTipoIdentificacion", idTipoIdentificacion);
            }
            else
            {
                idTipoIdentificacionParameter = new ObjectParameter("IdTipoIdentificacion", typeof(System.Guid));
            }
    
            ObjectParameter codigoIdentificacionParameter;
    
            if (codigoIdentificacion != null)
            {
                codigoIdentificacionParameter = new ObjectParameter("CodigoIdentificacion", codigoIdentificacion);
            }
            else
            {
                codigoIdentificacionParameter = new ObjectParameter("CodigoIdentificacion", typeof(string));
            }
    
            ObjectParameter direccionParameter;
    
            if (direccion != null)
            {
                direccionParameter = new ObjectParameter("Direccion", direccion);
            }
            else
            {
                direccionParameter = new ObjectParameter("Direccion", typeof(string));
            }
    
            ObjectParameter telefonoParameter;
    
            if (telefono.HasValue)
            {
                telefonoParameter = new ObjectParameter("Telefono", telefono);
            }
            else
            {
                telefonoParameter = new ObjectParameter("Telefono", typeof(int));
            }
    
            ObjectParameter emailParameter;
    
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(string));
            }
    
            ObjectParameter creadoPorIdUsuarioParameter;
    
            if (creadoPorIdUsuario.HasValue)
            {
                creadoPorIdUsuarioParameter = new ObjectParameter("CreadoPorIdUsuario", creadoPorIdUsuario);
            }
            else
            {
                creadoPorIdUsuarioParameter = new ObjectParameter("CreadoPorIdUsuario", typeof(System.Guid));
            }
    
            ObjectParameter creadoEnParameter;
    
            if (creadoEn != null)
            {
                creadoEnParameter = new ObjectParameter("CreadoEn", creadoEn);
            }
            else
            {
                creadoEnParameter = new ObjectParameter("CreadoEn", typeof(string));
            }
    
            ObjectParameter creadoElParameter;
    
            if (creadoEl.HasValue)
            {
                creadoElParameter = new ObjectParameter("CreadoEl", creadoEl);
            }
            else
            {
                creadoElParameter = new ObjectParameter("CreadoEl", typeof(System.DateTime));
            }
    
            ObjectParameter modificadoPorIdUsuarioParameter;
    
            if (modificadoPorIdUsuario.HasValue)
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", modificadoPorIdUsuario);
            }
            else
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", typeof(System.Guid));
            }
    
            ObjectParameter modificadoEnParameter;
    
            if (modificadoEn != null)
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", modificadoEn);
            }
            else
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", typeof(string));
            }
    
            ObjectParameter modificadoElParameter;
    
            if (modificadoEl.HasValue)
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", modificadoEl);
            }
            else
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("EntidadInsertar", idTipoEntidadParameter, idEstadoEntidadParameter, idTipoIdentificacionParameter, codigoIdentificacionParameter, direccionParameter, telefonoParameter, emailParameter, creadoPorIdUsuarioParameter, creadoEnParameter, creadoElParameter, modificadoPorIdUsuarioParameter, modificadoEnParameter, modificadoElParameter);
        }
        public virtual ObjectResult<Nullable<System.Guid>> EntidadActualizar(Nullable<System.Guid> idEntidad, Nullable<System.Guid> idTipoEntidad, Nullable<System.Guid> idEstadoEntidad, Nullable<System.Guid> idTipoIdentificacion, string codigoIdentificacion, string direccion, Nullable<int> telefono, string email, Nullable<System.Guid> modificadoPorIdUsuario, string modificadoEn, Nullable<System.DateTime> modificadoEl)
        {
    
            ObjectParameter idEntidadParameter;
    
            if (idEntidad.HasValue)
            {
                idEntidadParameter = new ObjectParameter("IdEntidad", idEntidad);
            }
            else
            {
                idEntidadParameter = new ObjectParameter("IdEntidad", typeof(System.Guid));
            }
    
            ObjectParameter idTipoEntidadParameter;
    
            if (idTipoEntidad.HasValue)
            {
                idTipoEntidadParameter = new ObjectParameter("IdTipoEntidad", idTipoEntidad);
            }
            else
            {
                idTipoEntidadParameter = new ObjectParameter("IdTipoEntidad", typeof(System.Guid));
            }
    
            ObjectParameter idEstadoEntidadParameter;
    
            if (idEstadoEntidad.HasValue)
            {
                idEstadoEntidadParameter = new ObjectParameter("IdEstadoEntidad", idEstadoEntidad);
            }
            else
            {
                idEstadoEntidadParameter = new ObjectParameter("IdEstadoEntidad", typeof(System.Guid));
            }
    
            ObjectParameter idTipoIdentificacionParameter;
    
            if (idTipoIdentificacion.HasValue)
            {
                idTipoIdentificacionParameter = new ObjectParameter("IdTipoIdentificacion", idTipoIdentificacion);
            }
            else
            {
                idTipoIdentificacionParameter = new ObjectParameter("IdTipoIdentificacion", typeof(System.Guid));
            }
    
            ObjectParameter codigoIdentificacionParameter;
    
            if (codigoIdentificacion != null)
            {
                codigoIdentificacionParameter = new ObjectParameter("CodigoIdentificacion", codigoIdentificacion);
            }
            else
            {
                codigoIdentificacionParameter = new ObjectParameter("CodigoIdentificacion", typeof(string));
            }
    
            ObjectParameter direccionParameter;
    
            if (direccion != null)
            {
                direccionParameter = new ObjectParameter("Direccion", direccion);
            }
            else
            {
                direccionParameter = new ObjectParameter("Direccion", typeof(string));
            }
    
            ObjectParameter telefonoParameter;
    
            if (telefono.HasValue)
            {
                telefonoParameter = new ObjectParameter("Telefono", telefono);
            }
            else
            {
                telefonoParameter = new ObjectParameter("Telefono", typeof(int));
            }
    
            ObjectParameter emailParameter;
    
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(string));
            }
    
            ObjectParameter modificadoPorIdUsuarioParameter;
    
            if (modificadoPorIdUsuario.HasValue)
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", modificadoPorIdUsuario);
            }
            else
            {
                modificadoPorIdUsuarioParameter = new ObjectParameter("ModificadoPorIdUsuario", typeof(System.Guid));
            }
    
            ObjectParameter modificadoEnParameter;
    
            if (modificadoEn != null)
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", modificadoEn);
            }
            else
            {
                modificadoEnParameter = new ObjectParameter("ModificadoEn", typeof(string));
            }
    
            ObjectParameter modificadoElParameter;
    
            if (modificadoEl.HasValue)
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", modificadoEl);
            }
            else
            {
                modificadoElParameter = new ObjectParameter("ModificadoEl", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<System.Guid>>("EntidadActualizar", idEntidadParameter, idTipoEntidadParameter, idEstadoEntidadParameter, idTipoIdentificacionParameter, codigoIdentificacionParameter, direccionParameter, telefonoParameter, emailParameter, modificadoPorIdUsuarioParameter, modificadoEnParameter, modificadoElParameter);
        }

        #endregion
    }
}
